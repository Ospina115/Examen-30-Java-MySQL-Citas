/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.examenjava.forms;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

import javax.swing.JOptionPane;

import com.examenjava.forms.LoginMenu;
import com.examenjava.paciente.PacienteDAO;
import com.examenjava.paciente.PacienteService;
/**
 *
 * @author camper
 */
public class AdminMenu extends javax.swing.JFrame {

    /**
     * Creates new form AdminMenu
     */
    public AdminMenu() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pacientes = new javax.swing.JButton();
        medicos = new javax.swing.JButton();
        especialidades = new javax.swing.JButton();
        citas = new javax.swing.JButton();
        salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 3, 48)); // NOI18N
        jLabel1.setText("ADMIN MENU");

        pacientes.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        pacientes.setText("Gestion Pacientes");
        pacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pacientesActionPerformed(evt);
            }
        });

        medicos.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        medicos.setText("Gestion Medicos");

        especialidades.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        especialidades.setText("Gestion Especialidades");

        citas.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        citas.setText("Gestion Citas");

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pacientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(medicos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(especialidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(citas, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salir)
                .addGap(178, 178, 178))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addComponent(pacientes)
                .addGap(18, 18, 18)
                .addComponent(medicos)
                .addGap(18, 18, 18)
                .addComponent(especialidades)
                .addGap(18, 18, 18)
                .addComponent(citas)
                .addGap(27, 27, 27)
                .addComponent(salir)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        this.dispose();
        LoginMenu loginMenu = new LoginMenu();
        loginMenu.setVisible(true);
    }//GEN-LAST:event_salirActionPerformed

    private void pacientesActionPerformed(java.awt.event.ActionEvent evt) {
        while (true) {
            String[] options = {"Crear", "Leer", "Actualizar", "Eliminar", "Listar", "Salir"};
            int choice = JOptionPane.showOptionDialog(null, "Seleccione una opción", "CRUD Paciente",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

            switch (choice) {
                case 0:
                    crearPaciente();
                    break;
                case 1:
                    leerPaciente();
                    break;
                case 2:
                    actualizarPaciente();
                    break;
                case 3:
                    eliminarPaciente();
                    break;
                case 4:
                    listarPacientes();
                    break;
                case 5:
                    return;
                default:
                    break;
            }
        }
    }

    private void crearPaciente() {
        try {
            String nombre = JOptionPane.showInputDialog("Nombre:");
            String apellido = JOptionPane.showInputDialog("Apellido:");
            String fechaStr = JOptionPane.showInputDialog("Fecha de Nacimiento (yyyy-MM-dd):");
            Date fechaNacimiento = new SimpleDateFormat("yyyy-MM-dd").parse(fechaStr);
            String direccion = JOptionPane.showInputDialog("Dirección:");
            String telefono = JOptionPane.showInputDialog("Teléfono:");
            String email = JOptionPane.showInputDialog("Email:");

            Paciente paciente = new Paciente(0, nombre, apellido, fechaNacimiento, direccion, telefono, email);
            PacienteDAO pacienteDAO = new PacienteDAO();
            pacienteDAO.crearPaciente(paciente);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Error en el formato de la fecha");
        }
    }

    private void leerPaciente() {
        try {
            int id = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del paciente:"));
            PacienteDAO pacienteDAO = new PacienteDAO();
            Paciente paciente = pacienteDAO.leerPaciente(id);
            if (paciente != null) {
                JOptionPane.showMessageDialog(null, "Paciente encontrado:\n" +
                        "ID: " + paciente.getId() + "\n" +
                        "Nombre: " + paciente.getNombre() + "\n" +
                        "Apellido: " + paciente.getApellido() + "\n" +
                        "Fecha de Nacimiento: " + new SimpleDateFormat("yyyy-MM-dd").format(paciente.getFechaNacimiento()) + "\n" +
                        "Dirección: " + paciente.getDireccion() + "\n" +
                        "Teléfono: " + paciente.getTelefono() + "\n" +
                        "Email: " + paciente.getEmail());
            } else {
                JOptionPane.showMessageDialog(null, "Paciente no encontrado");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error en el formato del ID");
        }
    }

    private void actualizarPaciente() {
        try {
            int id = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del paciente a actualizar:"));
            PacienteDAO pacienteDAO = new PacienteDAO();
            Paciente pacienteExistente = pacienteDAO.leerPaciente(id);

            if (pacienteExistente != null) {
                String nombre = JOptionPane.showInputDialog("Nuevo Nombre:", pacienteExistente.getNombre());
                String apellido = JOptionPane.showInputDialog("Nuevo Apellido:", pacienteExistente.getApellido());
                String fechaStr = JOptionPane.showInputDialog("Nueva Fecha de Nacimiento (yyyy-MM-dd):", new SimpleDateFormat("yyyy-MM-dd").format(pacienteExistente.getFechaNacimiento()));
                Date fechaNacimiento = new SimpleDateFormat("yyyy-MM-dd").parse(fechaStr);
                String direccion = JOptionPane.showInputDialog("Nueva Dirección:", pacienteExistente.getDireccion());
                String telefono = JOptionPane.showInputDialog("Nuevo Teléfono:", pacienteExistente.getTelefono());
                String email = JOptionPane.showInputDialog("Nuevo Email:", pacienteExistente.getEmail());

                Paciente pacienteActualizado = new Paciente(id, nombre, apellido, fechaNacimiento, direccion, telefono, email);
                pacienteDAO.actualizarPaciente(pacienteActualizado);
            } else {
                JOptionPane.showMessageDialog(null, "Paciente no encontrado");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error en el formato del ID");
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Error en el formato de la fecha");
        }
    }

    private void eliminarPaciente() {
        try {
            int id = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el ID del paciente a eliminar:"));
            PacienteDAO pacienteDAO = new PacienteDAO();
            pacienteDAO.eliminarPaciente(id);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error en el formato del ID");
        }
    }

    private void listarPacientes() {
        PacienteDAO pacienteDAO = new PacienteDAO();
        List<Paciente> pacientes = pacienteDAO.obtenerPacientes();
        if (pacientes.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay pacientes en la base de datos.");
        } else {
            StringBuilder sb = new StringBuilder();
            for (Paciente paciente : pacientes) {
                sb.append("ID: ").append(paciente.getId()).append("\n")
                        .append("Nombre: ").append(paciente.getNombre()).append("\n")
                        .append("Apellido: ").append(paciente.getApellido()).append("\n")
                        .append("Fecha de Nacimiento: ").append(new SimpleDateFormat("yyyy-MM-dd").format(paciente.getFechaNacimiento())).append("\n")
                        .append("Dirección: ").append(paciente.getDireccion()).append("\n")
                        .append("Teléfono: ").append(paciente.getTelefono()).append("\n")
                        .append("Email: ").append(paciente.getEmail()).append("\n\n");
            }
            JOptionPane.showMessageDialog(null, sb.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton citas;
    private javax.swing.JButton especialidades;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton medicos;
    private javax.swing.JButton pacientes;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables
}
